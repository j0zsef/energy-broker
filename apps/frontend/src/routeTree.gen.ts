/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as ConnectionsIndexImport } from './routes/connections/index'
import { Route as ConnectionsCallbackImport } from './routes/connections/callback'
import { Route as ConnectionsAddImport } from './routes/connections/add'
import { Route as ConnectionsEnergyConnectionImport } from './routes/connections/$energy-connection'
import { Route as AccountSummaryImport } from './routes/account/summary'
import { Route as AccountSettingsImport } from './routes/account/settings'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ConnectionsIndexRoute = ConnectionsIndexImport.update({
  id: '/connections/',
  path: '/connections/',
  getParentRoute: () => rootRoute,
} as any)

const ConnectionsCallbackRoute = ConnectionsCallbackImport.update({
  id: '/connections/callback',
  path: '/connections/callback',
  getParentRoute: () => rootRoute,
} as any)

const ConnectionsAddRoute = ConnectionsAddImport.update({
  id: '/connections/add',
  path: '/connections/add',
  getParentRoute: () => rootRoute,
} as any)

const ConnectionsEnergyConnectionRoute =
  ConnectionsEnergyConnectionImport.update({
    id: '/connections/$energy-connection',
    path: '/connections/$energy-connection',
    getParentRoute: () => rootRoute,
  } as any)

const AccountSummaryRoute = AccountSummaryImport.update({
  id: '/account/summary',
  path: '/account/summary',
  getParentRoute: () => rootRoute,
} as any)

const AccountSettingsRoute = AccountSettingsImport.update({
  id: '/account/settings',
  path: '/account/settings',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/account/settings': {
      id: '/account/settings'
      path: '/account/settings'
      fullPath: '/account/settings'
      preLoaderRoute: typeof AccountSettingsImport
      parentRoute: typeof rootRoute
    }
    '/account/summary': {
      id: '/account/summary'
      path: '/account/summary'
      fullPath: '/account/summary'
      preLoaderRoute: typeof AccountSummaryImport
      parentRoute: typeof rootRoute
    }
    '/connections/$energy-connection': {
      id: '/connections/$energy-connection'
      path: '/connections/$energy-connection'
      fullPath: '/connections/$energy-connection'
      preLoaderRoute: typeof ConnectionsEnergyConnectionImport
      parentRoute: typeof rootRoute
    }
    '/connections/add': {
      id: '/connections/add'
      path: '/connections/add'
      fullPath: '/connections/add'
      preLoaderRoute: typeof ConnectionsAddImport
      parentRoute: typeof rootRoute
    }
    '/connections/callback': {
      id: '/connections/callback'
      path: '/connections/callback'
      fullPath: '/connections/callback'
      preLoaderRoute: typeof ConnectionsCallbackImport
      parentRoute: typeof rootRoute
    }
    '/connections/': {
      id: '/connections/'
      path: '/connections'
      fullPath: '/connections'
      preLoaderRoute: typeof ConnectionsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/summary': typeof AccountSummaryRoute
  '/connections/$energy-connection': typeof ConnectionsEnergyConnectionRoute
  '/connections/add': typeof ConnectionsAddRoute
  '/connections/callback': typeof ConnectionsCallbackRoute
  '/connections': typeof ConnectionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/summary': typeof AccountSummaryRoute
  '/connections/$energy-connection': typeof ConnectionsEnergyConnectionRoute
  '/connections/add': typeof ConnectionsAddRoute
  '/connections/callback': typeof ConnectionsCallbackRoute
  '/connections': typeof ConnectionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/account/settings': typeof AccountSettingsRoute
  '/account/summary': typeof AccountSummaryRoute
  '/connections/$energy-connection': typeof ConnectionsEnergyConnectionRoute
  '/connections/add': typeof ConnectionsAddRoute
  '/connections/callback': typeof ConnectionsCallbackRoute
  '/connections/': typeof ConnectionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/account/settings'
    | '/account/summary'
    | '/connections/$energy-connection'
    | '/connections/add'
    | '/connections/callback'
    | '/connections'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/account/settings'
    | '/account/summary'
    | '/connections/$energy-connection'
    | '/connections/add'
    | '/connections/callback'
    | '/connections'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/account/settings'
    | '/account/summary'
    | '/connections/$energy-connection'
    | '/connections/add'
    | '/connections/callback'
    | '/connections/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  AccountSettingsRoute: typeof AccountSettingsRoute
  AccountSummaryRoute: typeof AccountSummaryRoute
  ConnectionsEnergyConnectionRoute: typeof ConnectionsEnergyConnectionRoute
  ConnectionsAddRoute: typeof ConnectionsAddRoute
  ConnectionsCallbackRoute: typeof ConnectionsCallbackRoute
  ConnectionsIndexRoute: typeof ConnectionsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  AccountSettingsRoute: AccountSettingsRoute,
  AccountSummaryRoute: AccountSummaryRoute,
  ConnectionsEnergyConnectionRoute: ConnectionsEnergyConnectionRoute,
  ConnectionsAddRoute: ConnectionsAddRoute,
  ConnectionsCallbackRoute: ConnectionsCallbackRoute,
  ConnectionsIndexRoute: ConnectionsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/account/settings",
        "/account/summary",
        "/connections/$energy-connection",
        "/connections/add",
        "/connections/callback",
        "/connections/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx"
    },
    "/account/settings": {
      "filePath": "account/settings.tsx"
    },
    "/account/summary": {
      "filePath": "account/summary.tsx"
    },
    "/connections/$energy-connection": {
      "filePath": "connections/$energy-connection.tsx"
    },
    "/connections/add": {
      "filePath": "connections/add.tsx"
    },
    "/connections/callback": {
      "filePath": "connections/callback.tsx"
    },
    "/connections/": {
      "filePath": "connections/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
